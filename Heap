public class Heap {
   private NodoHeap[] heapArray;
   private int tamañoMax;           // tamaño del array
   private int tamaño;       // Numero de nodos en el array

   public Heap(int mx)            // constructor
      {
      tamañoMax = mx;
      tamaño = 0;
      heapArray = new NodoHeap[tamañoMax];  // creamos el array
      }


   public boolean isEmpty()
      { return tamaño==0; }

   public boolean insert(Pacientes element)
      {
      if(tamaño==tamañoMax)
         return false;
      NodoHeap newNode = new NodoHeap(element);
      heapArray[tamaño] = newNode;
      trickleUp(tamaño++);
      return true;
      }  
   //int pos=NodoHeap element.posicion;
   public void trickleUp(int pos)
      {
      int parent = (pos-1) / 2;
      NodoHeap bottom = heapArray[pos];

      while( pos > 0 &&
             heapArray[parent].getElement().getNumP() < bottom.getElement().getNumP() )
         {
         heapArray[pos] = heapArray[parent];  // move it down
         pos = parent;
         parent = (parent-1) / 2;
         }  
      heapArray[pos] = bottom;
      }  
   
   public NodoHeap remove()           // delete item with max key
      {                           // (assumes non-empty list)
      NodoHeap root = heapArray[0];
      heapArray[0] = heapArray[--tamaño];
      trickleDown(0);
      return root;
      }  
   
   public void trickleDown(int pos)
      {
      int largerChild;
      NodoHeap top = heapArray[pos];       // save root
      while(pos < tamaño/2)       // while node has at
         {                               //    least one child,
         int leftChild = 2*pos+1;
         int rightChild = leftChild+1;
                                         // find larger child
         if(rightChild < tamaño &&  // (rightChild exists?)
                             heapArray[leftChild].getElement().getNumP() <
                             heapArray[rightChild].getElement().getNumP())
            largerChild = rightChild;
         else
            largerChild = leftChild;
                                         // top >= largerChild?
         if( top.getElement().getNumP() >= heapArray[largerChild].getElement().getNumP() )
            break;
                                         // shift child up
         heapArray[pos] = heapArray[largerChild];
         pos = largerChild;            // go down
         }  // end while
      heapArray[pos] = top;            // root to index
      }  


   
}

